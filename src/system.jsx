const list = [
  { id: 1, title: "Змінні в JavaScript", Lesson: Lesson1, isOpened: false },
  {
    id: 2,
    title: "Типи даних в JavaScript",
    Lesson: Lesson2,
    isOpened: false,
  },
  {
    id: 3,
    title: "Оператори та вирази в JavaScript",
    isOpened: false,
    Lesson: Lesson3,
  },
  {
    id: 4,
    title: "Робота з функціями",
    isOpened: false,
    Lesson: Lesson4,
  },
  {
    id: 5,
    title: "Об'єкти і Масиви в JavaScript",
    isOpened: false,
    Lesson: Lesson5,
  },
];
function Lesson1() {
  return (
    <div>
      <h2>Змінні в JavaScript</h2>
      <p>
        Змінні - це один із основних елементів мови програмування JavaScript.
        Вони використовуються для зберігання даних, таких як текст, числа,
        булеві значення та багато іншого. Змінні дозволяють нам зберігати та
        маніпулювати інформацією в нашому коді.
      </p>
      <h3>Створення змінних:</h3>
      <p>У JavaScript існують три способи створення змінних:</p>
      <ul>
        <li>
          <strong>
            <code>var</code>:
          </strong>{" "}
          Цей спосіб був популярний в старих версіях JavaScript, але зараз
          рекомендується використовувати <code>let</code> або <code>const</code>
          . Змінні, оголошені за допомогою <code>var</code>, можуть бути змінені
          та поновлені.
        </li>
        <li>
          <strong>
            <code>let</code>:
          </strong>{" "}
          Змінні, оголошені з використанням <code>let</code>, можуть змінюватися
          після їхнього оголошення. Це дозволяє нам змінювати значення змінних у
          майбутньому.
        </li>
        <li>
          <strong>
            <code>const</code>:
          </strong>{" "}
          Змінні, оголошені з використанням <code>const</code>, не можуть бути
          змінені після їхнього оголошення. Вони призначені для збереження
          незмінних значень.
        </li>
      </ul>
      <h3>Приклади іменування змінних:</h3>
      <p>
        Змінні можуть мати будь-яке ім'я, але існують певні правила та
        рекомендації:
      </p>
      <ul>
        <li>
          Ім'я змінної повинно починатися з літери або символу підкреслення (_).
        </li>
        <li>
          Ім'я змінної може містити літери, цифри, символи підкреслення та
          долара ($).
        </li>
        <li>
          Ім'я змінної регістрочутливе (наприклад, "myVar" і "myvar" вважаються
          різними змінними).
        </li>
      </ul>
      <p>Нижче наведені приклади коректних імен змінних:</p>

      <code><pre>{`var name = "John"; 
let age = 30; 
const pi = 3.1415;`}</pre></code>
    </div>
  );
}
function Lesson2() {
  return (
    <div>
      <h2>Типи даних в JavaScript</h2>
      <p>
        В JavaScript існує кілька основних типів даних, які використовуються для
        зберігання та опрацювання інформації. Знання цих типів даних є ключовим
        для ефективного програмування в цій мові.
      </p>

      <h3>Рядки (Strings):</h3>
      <p>
        Рядки в JavaScript представляють текстову інформацію і заключаються в
        лапки, одинарні або подвійні. Наприклад:
      </p>

      <code>var name = "John";</code>

      <h3>Числа (Numbers):</h3>
      <p>
        Числа використовуються для представлення чисельної інформації. Вони
        можуть бути цілими або десятковими числами. Наприклад:
      </p>

      <code><pre>{`var age = 30; 
var pi = 3.1415;`}
        </pre></code>

      <h3>Булеві значення (Booleans):</h3>
      <p>
        Булеві значення можуть бути лише двох видів: <code>true</code> (істина)
        або <code>false</code> (неправда). Вони використовуються для виразів,
        які повертають результати логічних операцій. Наприклад:
      </p>

      <code>var isStudent = true; var isAdult = false;</code>

      <h3>Масиви (Arrays):</h3>
      <p>
        Масиви дозволяють зберігати послідовності даних, такі як числа або
        рядки, у впорядкованому способі. Елементи масиву індексуються числами,
        починаючи з 0. Наприклад:
      </p>

      <code><pre>{`var colors = ["червоний", "зелений", "синій"];`}</pre></code>

      <h3>Об'єкти (Objects):</h3>
      <p>
        Об'єкти дозволяють групувати різні властивості та методи в одному
        сутності. Властивості об'єкта можуть бути будь-якого типу даних,
        включаючи інші об'єкти. Наприклад:
      </p>

      <code><pre>
      {`var person = {
      name: "John",
      age: 30,
      isStudent: true
  };`}
      </pre>
        
      </code>

      <h3>Інші типи:</h3>
      <p>
        У JavaScript є й інші типи даних, такі як <code>null</code> (вказує на
        відсутність значення) та <code>undefined</code> (вказує на змінну, якій
        не було присвоєно значення).
      </p>

      <code><pre>{`var emptyValue = null; 
var undefinedValue;`}</pre></code>
      <p>
        Знання цих типів даних допомагає вам правильно структурувати ваш код та
        використовувати дані ефективно при розробці веб-додатків.
      </p>
    </div>
  );
}

function Lesson3() {
  return (
    <div>
      <h2>Оператори та вирази в JavaScript</h2>
      <p>
        Оператори та вирази є важливою частиною JavaScript. Вони дозволяють вам
        виконувати різні операції над даними та здійснювати рішення в вашому
        коді. Давайте розглянемо їх докладніше.
      </p>

      <h3>Оператори:</h3>
      <p>
        Оператори - це символи або ключові слова, які використовуються для
        виконання операцій над даними. Основні типи операторів у JavaScript:
      </p>
      <ul>
        <li>
          <strong>Арифметичні оператори:</strong> Додають, віднімають, множать
          та ділять числа. Наприклад: +, -, *, /.
        </li>
        <li>
          <strong>Оператори порівняння:</strong>{" "}
          {`Порівнюють два значення та повертають булеве значення. Наприклад: ==, !=, <, >, <=, >=.`}
        </li>
        <li>
          <strong>Логічні оператори:</strong> Використовуються для об'єднання
          або порівняння булевих значень. Наприклад: && (логічне І), || (логічне
          АБО), ! (логічне заперечення).
        </li>
        <li>
          <strong>Оператори присвоєння:</strong> Встановлюють значення змінних.
          Наприклад: =, +=, -=, *=, /=.
        </li>
      </ul>

      <h3>Вирази:</h3>
      <p>
        Вираз - це комбінація операторів та операндів (змінних, значень), які
        обчислюють значення. Вони можуть бути простими або складними. Наприклад,
        вираз <code>3 + 4</code> є арифметичним виразом, який обчислюється в{" "}
        <code>7</code>.
      </p>

      <p>Приклади виразів:</p>
      <ul>
        <li>
          Арифметичний вираз: <code>5 * (10 + 2)</code>
        </li>
        <li>
          Вираз зі змінними:{" "}
          <code>var x = 10; var y = 20; var sum = x + y;</code>
        </li>
        <li>
          Логічний вираз: <code>{"(x > 5) && (y < 30)"}</code>
        </li>
      </ul>

      <p>
        Вирази використовуються в умовних операціях, циклах, функціях та в
        багатьох інших аспектах програмування для обчислення та прийняття
        рішень.
      </p>

      <p>
        Зрозуміння операторів та виразів важливо для розробки динамічних та
        інтерактивних програм на JavaScript.
      </p>
    </div>
  );
}

function Lesson4() {
  return (
    <div>
<h2>Робота з функціями в JavaScript</h2>
<p>Функції - це основний засіб організації та групування коду в JavaScript. Вони дозволяють визначити певний блок коду та використовувати його багато разів без необхідності повторювати код.</p>

<h3>Створення функцій</h3>
<p>Функції можна створити за допомогою ключового слова <code>function</code>. Ось приклад створення функції:</p>
<pre>
    <code>
        {`function привітатися() {
            console.log("Привіт, світ!");
        }`}
    </code>
</pre>
<p>У цьому прикладі <code>привітатися</code> - назва функції, і вона викликає команду <code>console.log</code>, щоб вивести "Привіт, світ!" в консолі.</p>

<h3>Виклик функцій</h3>
<p>Для виклику функції використовується її назва та круглі дужки. Ось приклад виклику функції <code>привітатися</code>:</p>
<pre>
    <code>
        привітатися();
    </code>
</pre>
<p>Цей виклик виведе "Привіт, світ!" в консолі.</p>

<h3>Параметри та аргументи</h3>
<p>Функції можуть приймати параметри, які визначаються у вигляді змінних в круглих дужках. Параметри використовуються для передачі даних у функцію. Ось приклад функції, яка приймає параметри:</p>
<pre>
    <code>
        {`function вивестиПривітання(ім'я) {
            console.log("Привіт, " + ім'я + "!");
        }`}
    </code>
</pre>
<p>У цьому випадку <code>ім'я</code> - параметр функції. Під час виклику функції потрібно передати значення для параметра:</p>
<pre>
    <code>
        вивестиПривітання("Оля");
    </code>
</pre>
<p>Цей виклик виведе "Привіт, Оля!" в консолі.</p>

<h3>Повернення значень</h3>
<p>Функції можуть повертати значення за допомогою ключового слова <code>return</code>. Ось приклад функції, яка повертає результат обчислення:</p>
<pre>
    <code>
        {`function додати(а, b) {
            return a + b;
        }`}
    </code>
</pre>
<p>Зараз виклик функції поверне суму двох чисел:</p>
<pre>
    <code>
        {`var результат = додати(5, 3);
        console.log(результат); // Виведе 8 в консолі`}
    </code>
</pre>

<h3>Заключні слова</h3>
<p>Функції - потужний інструмент в JavaScript, що дозволяє організувати та структурувати код. Вони використовуються для виконання конкретних завдань та можуть приймати параметри та повертати значення. Правильне використання функцій спрощує розробку та підтримку програмного коду.</p>

    </div>
  );
}
function Lesson5(){
  return (
    <div>
<h2>Об'єкти</h2>
<p>Об'єкти в JavaScript є одними з основних структур даних та представляють собою колекцію ключ-значок. Кожен ключ пов'язаний зі значенням та використовується для зберігання та доступу до даних. Об'єкти створюються за допомогою фігурних дужок <code>{}</code> та можуть містити різні типи даних.</p>

<p>Приклад створення об'єкта:</p>
<pre>
    <code>
   {`var person = {
        firstName: "John",
        lastName: "Doe",
        age: 30,
        isStudent: false
      };`}
    </code>
</pre>

<p>Доступ до властивостей об'єкта:</p>
    <code>
<pre>
        {`var firstName = person.firstName; // отримання значення властивості
person.age = 35; // зміна значення властивості`}
</pre>
    </code>

<h2>Масиви</h2>
<p>Масиви в JavaScript є упорядкованими колекціями даних. Кожен елемент масиву має індекс (позицію), починаючи з 0. Масиви створюються за допомогою квадратних дужок <code>[]</code> і можуть містити різні типи даних, включаючи інші масиви або об'єкти.</p>

<p>Приклад створення масиву:</p>
<pre>
    <code>
        var colors = ["red", "green", "blue"];
    </code>
</pre>

<p>Доступ до елементів масиву:</p>
<pre>
    <code><pre>
    {`var firstColor = colors[0]; // отримання першого елемента
colors[1] = "yellow"; // зміна другого елемента`}
    </pre>

    </code>
</pre>

<p>Масиви також мають корисні методи, такі як <code>push</code> (додавання на кінець), <code>pop</code> (видалення з кінця), <code>shift</code> (видалення з початку), <code>unshift</code> (додавання на початок) та інші.</p>

<p>Приклади додавання та видалення елементів:</p>
    <code>
<pre>
        {`colors.push("purple"); // додати "purple" в кінець масиву
colors.pop(); // видалити останній елемент
colors.unshift("orange"); // додати "orange" на початок масиву
colors.shift(); // видалити перший елемент`}
</pre>
    </code>

<p>Об'єкти і масиви є потужними засобами для зберігання та обробки даних в JavaScript та їх можна комбінувати для створення складних структур даних.</p>

    </div>
    )
}
export { list };
